// automatically generated by root-gen-datareader.
// DO NOT EDIT.

package event

import (
	"go-hep.org/x/hep/groot/rtree"
)

type P3 struct {
	ROOT_Px int32   `groot:"Px"`
	ROOT_Py float64 `groot:"Py"`
	ROOT_Pz int32   `groot:"Pz"`
}

type evt struct {
	ROOT_Beg       string      `groot:"Beg"`
	ROOT_I16       int16       `groot:"I16"`
	ROOT_I32       int32       `groot:"I32"`
	ROOT_I64       int64       `groot:"I64"`
	ROOT_U16       uint16      `groot:"U16"`
	ROOT_U32       uint32      `groot:"U32"`
	ROOT_U64       uint64      `groot:"U64"`
	ROOT_F32       float32     `groot:"F32"`
	ROOT_F64       float64     `groot:"F64"`
	ROOT_Str       string      `groot:"Str"`
	ROOT_P3        P3          `groot:"P3"`
	ROOT_ArrayI16  [10]int16   `groot:"ArrayI16[10]"`
	ROOT_ArrayI32  [10]int32   `groot:"ArrayI32[10]"`
	ROOT_ArrayI64  [10]int64   `groot:"ArrayI64[10]"`
	ROOT_ArrayU16  [10]uint16  `groot:"ArrayU16[10]"`
	ROOT_ArrayU32  [10]uint32  `groot:"ArrayU32[10]"`
	ROOT_ArrayU64  [10]uint64  `groot:"ArrayU64[10]"`
	ROOT_ArrayF32  [10]float32 `groot:"ArrayF32[10]"`
	ROOT_ArrayF64  [10]float64 `groot:"ArrayF64[10]"`
	ROOT_N         int32       `groot:"N"`
	ROOT_SliceI16  []int16     `groot:"SliceI16[N]"`
	ROOT_SliceI32  []int32     `groot:"SliceI32[N]"`
	ROOT_SliceI64  []int64     `groot:"SliceI64[N]"`
	ROOT_SliceU16  []uint16    `groot:"SliceU16[N]"`
	ROOT_SliceU32  []uint32    `groot:"SliceU32[N]"`
	ROOT_SliceU64  []uint64    `groot:"SliceU64[N]"`
	ROOT_SliceF32  []float32   `groot:"SliceF32[N]"`
	ROOT_SliceF64  []float64   `groot:"SliceF64[N]"`
	ROOT_StdStr    string      `groot:"StdStr"`
	ROOT_StlVecI16 []int16     `groot:"StlVecI16"`
	ROOT_StlVecI32 []int32     `groot:"StlVecI32"`
	ROOT_StlVecI64 []int64     `groot:"StlVecI64"`
	ROOT_StlVecU16 []uint16    `groot:"StlVecU16"`
	ROOT_StlVecU32 []uint32    `groot:"StlVecU32"`
	ROOT_StlVecU64 []uint64    `groot:"StlVecU64"`
	ROOT_StlVecF32 []float32   `groot:"StlVecF32"`
	ROOT_StlVecF64 []float64   `groot:"StlVecF64"`
	ROOT_StlVecStr []string    `groot:"StlVecStr"`
	ROOT_End       string      `groot:"End"`
}

// Data is the data contained in a rtree.Tree.
type Data struct {
	ROOT_evt evt `groot:"evt"`
}

type DataReader struct {
	Data   Data
	Tree   rtree.Tree
	Reader *rtree.Reader
}
